<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1.CSS 中 px,rem,em,vm,%,vx 的区别</title>
    <link href="/2023/03/04/CSS%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/CSS%20%E4%B8%AD%20px,rem,em,vm,%25,vx%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/03/04/CSS%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/CSS%20%E4%B8%AD%20px,rem,em,vm,%25,vx%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="1-CSS-中-px-rem-em-vm-vx-的区别"><a href="#1-CSS-中-px-rem-em-vm-vx-的区别" class="headerlink" title="1.CSS 中 px,rem,em,vm,%,vx 的区别"></a>1.CSS 中 px,rem,em,vm,%,vx 的区别</h1><h6 id="px"><a href="#px" class="headerlink" title="px"></a>px</h6><p>px 就是 pixel 像素的缩写，相对长度单位，网页设计常用的基本单位。像素 px 是相对于显示器屏幕分辨率而言的</p><h6 id="em"><a href="#em" class="headerlink" title="em"></a>em</h6><p>em 是相对长度单位。相对于当前对象内文本的字体尺寸（参考物是父元素的 font-size）<br>如当前父元素的字体尺寸未设置，则相对于浏览器的默认字体尺寸<br>特点：</p><ol><li>em 的值并不是固定的；</li><li>em 会继承父级元素的字体大小</li></ol><h6 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h6><p>rem 是 CSS3 新增的一个相对单位，rem 是相对于 HTML 根元素的字体大小（font-size）来计算的长度单位</p><p>如果你没有设置 html 的字体大小，就会以浏览器默认字体大小，一般是 16px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>&#125; <span class="hljs-comment">/* 10 ÷ 16 × 100% = 62.5% */</span><br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>&#125; <span class="hljs-comment">/* 1.4 × 10px = 14px */</span><br><br><span class="hljs-comment">/*在根元素中定义了一个基本字体大小为62.5%（也就是10px。设置这个值主要方便计算，如果没有设置，将是以“16px”为基准 ）*/</span><br></code></pre></td></tr></table></figure><p>优点是，只需要设置根目录的大小就可以把整个页面的成比例的调好</p><p>rem 兼容性：除了 IE8 及更早版本外，所有浏览器均已支持 rem</p><p>em 与 rem 的区别：</p><p>rem 是相对于根元素（html）的字体大小，而 em 是相对于其父元素的字体大小</p><p>两者使用规则：</p><ul><li>如果这个属性根据它的 font-size 进行测量，则使用 em</li><li>其他的一切事物属性均使用 rem</li></ul><p>这里提供了一个 px、em、rem 单位的转换工具：<a href="http://pxtoem.com/">http://pxtoem.com/</a></p><h6 id="vw、vh"><a href="#vw、vh" class="headerlink" title="vw、vh"></a>vw、vh</h6><p>vw、vh、vmax、vmin 这四个单位都是基于视口</p><p>vw 是相对视口（viewport）的宽度而定的，长度等于视口宽度的 1/100</p><p>假如浏览器的宽度为 200px，那么 1vw 就等于 2px（200px/100）</p><p>vh 是相对视口（viewport）的高度而定的，长度等于视口高度的 1/100</p><p>假如浏览器的高度为 500px，那么 1vh 就等于 5px（500px/100）</p><p>vmin 和 vmax 是相对于视口的高度和宽度两者之间的最小值或最大值</p><h4 id="其他单位："><a href="#其他单位：" class="headerlink" title="其他单位："></a>其他单位：</h4><h6 id="（百分比）"><a href="#（百分比）" class="headerlink" title="%（百分比）"></a>%（百分比）</h6><p>一般来说就是相对于父元素</p><p>1、对于普通定位元素就是我们理解的父元素</p><p>2、对于 position: absolute;的元素是相对于已定位的父元素</p><p>3、对于 position: fixed;的元素是相对于 ViewPort（可视窗口）</p><h6 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h6><p>css3 新单位，相对于视口的宽度或高度中较小的那个</p><p>其中最小的那个被均分为 100 单位的 vm</p><p>比如：浏览器高度 900px，宽度 1200px，取最小的浏览器高度，1 vm = 900px/100 = 9 px</p><p>缺点：兼容性差</p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0.环境初始化</title>
    <link href="/2022/09/19/mini-vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0.%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2022/09/19/mini-vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0.%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h1><p>本文，主要是对于开发与测试环境的初始化。在本项目中，将采用 <code>jest</code> 作为功能测试框架。使用 <code>typescript</code> 作为主要开发语言。</p><p>请按照以下步骤初始化环境：</p><h2 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h2><p>为了更好管理仓库的版本，请使用 Git 作为版本管理工具，请确保你的仓库中已初始化 Git</p><p>请确保你的仓库已经初始化 <code>package.json</code></p><p>请确保该仓库使用的包管理工具是 <code>pnpm</code></p><h2 id="2-安装必要的包"><a href="#2-安装必要的包" class="headerlink" title="2. 安装必要的包"></a>2. 安装必要的包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 typescript</span><br>pnpm add -D typescript<br><span class="hljs-comment"># 配置 tsconfig.json</span><br>npx tsc --init<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 ts-jest</span><br>pnpm add -D jest ts-jest<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装所需依赖</span><br>pnpm add -D @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-replace @rollup/plugin-typescript @types/jest rollup rollup-plugin-sourcemaps tslib<br></code></pre></td></tr></table></figure><h2 id="3-配置-npm-script"><a href="#3-配置-npm-script" class="headerlink" title="3. 配置 npm script"></a>3. 配置 npm script</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jest&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以通过 <code>pnpm test</code> 来运行所有的单元测试，也可以通过 VS Code 插件 <code>Jest Runner</code> 来对某一个参数单独 Debug 或 Run。</p><h2 id="4-配置-jest"><a href="#4-配置-jest" class="headerlink" title="4. 配置 jest"></a>4. 配置 jest</h2><p>1.为了让 jest 支持 ESM 我们需要如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">import(&#x27;ts-jest/dist/types&#x27;).InitialOptionsTsJest</span>&#125; */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">preset</span>: <span class="hljs-string">&quot;ts-jest&quot;</span>,<br>  <span class="hljs-attr">testEnvironment</span>: <span class="hljs-string">&quot;node&quot;</span>,<br>  <span class="hljs-attr">watchPathIgnorePatterns</span>: [<span class="hljs-string">&quot;/node_modules/&quot;</span>, <span class="hljs-string">&quot;/dist/&quot;</span>, <span class="hljs-string">&quot;/.git/&quot;</span>],<br>  <span class="hljs-attr">moduleFileExtensions</span>: [<span class="hljs-string">&quot;ts&quot;</span>, <span class="hljs-string">&quot;tsx&quot;</span>, <span class="hljs-string">&quot;js&quot;</span>, <span class="hljs-string">&quot;json&quot;</span>],<br>  <span class="hljs-attr">moduleNameMapper</span>: &#123;<br>    <span class="hljs-string">&quot;^@mini-vue/(.*?)$&quot;</span>: <span class="hljs-string">&quot;&lt;rootDir&gt;/packages/$1/src&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">rootDir</span>: __dirname,<br>  <span class="hljs-attr">testMatch</span>: [<span class="hljs-string">&quot;&lt;rootDir&gt;/packages/**/__tests__/**/*spec.[jt]s?(x)&quot;</span>],<br>  <span class="hljs-attr">testPathIgnorePatterns</span>: [<span class="hljs-string">&quot;/node_modules/&quot;</span>],<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="5-配置-tsconfig"><a href="#5-配置-tsconfig" class="headerlink" title="5.配置 tsconfig"></a>5.配置 tsconfig</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,<br>    <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;rootDir&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,<br>    <span class="hljs-string">&quot;moduleResolution&quot;</span>: <span class="hljs-string">&quot;node&quot;</span>,<br>    <span class="hljs-string">&quot;esModuleInterop&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;es2016&quot;</span>,<br>    <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;esnext&quot;</span>,<br>    <span class="hljs-string">&quot;noImplicitAny&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;removeComments&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;preserveConstEnums&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;sourceMap&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;downlevelIteration&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;esnext&quot;</span>, <span class="hljs-string">&quot;DOM&quot;</span>],<br>    <span class="hljs-string">&quot;types&quot;</span>: [<span class="hljs-string">&quot;jest&quot;</span>],<br>    <span class="hljs-string">&quot;paths&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;@mini-vue/*&quot;</span>: [<span class="hljs-string">&quot;packages/*/src&quot;</span>]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;packages/*/src&quot;</span>, <span class="hljs-string">&quot;packages/*/__tests__&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>以上，项目初始化配置已经配完。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mini-vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.实现 effect &amp; reactive &amp; 依赖收集 &amp; 触发依赖</title>
    <link href="/2022/09/19/mini-vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E5%AE%9E%E7%8E%B0-effect-reactive-%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86-%E8%A7%A6%E5%8F%91%E4%BE%9D%E8%B5%96/"/>
    <url>/2022/09/19/mini-vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E5%AE%9E%E7%8E%B0-effect-reactive-%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86-%E8%A7%A6%E5%8F%91%E4%BE%9D%E8%B5%96/</url>
    
    <content type="html"><![CDATA[<h1 id="实现-effect-amp-reactive-amp-依赖收集-amp-触发依赖"><a href="#实现-effect-amp-reactive-amp-依赖收集-amp-触发依赖" class="headerlink" title="实现 effect &amp; reactive &amp; 依赖收集 &amp; 触发依赖"></a>实现 effect &amp; reactive &amp; 依赖收集 &amp; 触发依赖</h1><p>在本小节呢，我们将实现 effect &amp; reactive &amp; 依赖收集 &amp; 触发依赖</p><h2 id="1-编写单元测试"><a href="#1-编写单元测试" class="headerlink" title="1. 编写单元测试"></a>1. 编写单元测试</h2><p>我们先建一个单元测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&quot;effect&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&quot;happy path&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> user = <span class="hljs-title function_">reactive</span>(&#123;<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>    &#125;);<br>    <span class="hljs-keyword">let</span> nextAge;<br>    <span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      nextAge = user.<span class="hljs-property">age</span> + <span class="hljs-number">1</span>;<br>    &#125;);<br>    <span class="hljs-title function_">expect</span>(nextAge).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">11</span>);<br><br>    <span class="hljs-comment">// update</span><br>    user.<span class="hljs-property">age</span>++;<br>    <span class="hljs-title function_">expect</span>(nextAge).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">12</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>以上的单元测试，就是本文中重点需要通过的测试。在此之前，我们可以先去写一个 reactive API</p><h2 id="2-reactive-实现"><a href="#2-reactive-实现" class="headerlink" title="2. reactive 实现"></a>2. reactive 实现</h2><h3 id="2-1-编写一个单元测试"><a href="#2-1-编写一个单元测试" class="headerlink" title="2.1 编写一个单元测试"></a>2.1 编写一个单元测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 编写 reactive 的 happy path</span><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&quot;reactive&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&quot;happy path&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> original = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span> &#125;;<br>    <span class="hljs-keyword">const</span> observed = <span class="hljs-title function_">reactive</span>(original);<br>    <span class="hljs-comment">// 期望包装后和源对象不一样</span><br>    <span class="hljs-title function_">expect</span>(observed).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBe</span>(original);<br>    <span class="hljs-comment">// 期望包装后某个属性的值和源对象一样</span><br>    <span class="hljs-title function_">expect</span>(observed.<span class="hljs-property">foo</span>).<span class="hljs-title function_">toBe</span>(original.<span class="hljs-property">foo</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>那该如何实现呢？在这里我们就可以使用 Proxy + Reflect 来实现了</p><h3 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2 实现"></a>2.2 实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 可以使用简单的 Proxy 来实现</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params">raw</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(raw, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver);<br>      <span class="hljs-keyword">return</span> res;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver);<br>      <span class="hljs-keyword">return</span> res;<br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行一下 happy path，通过</p><h2 id="3-effect-实现"><a href="#3-effect-实现" class="headerlink" title="3. effect 实现"></a>3. effect 实现</h2><p>下面，我们就回过头来看看最开始的单元测试，此时我们已经有了 reactive，接下来就是去实现一个 effect API。</p><h3 id="3-1-v1-版本"><a href="#3-1-v1-版本" class="headerlink" title="3.1 v1 版本"></a>3.1 v1 版本</h3><p>首先，我们知道了 effect 接受一个参数，可以通过抽象一层：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactiveEffect</span> &#123;<br>  private <span class="hljs-attr">_fn</span>: any<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fn</span> = fn<br>  &#125;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_fn</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-comment">// 抽象一层</span><br>  <span class="hljs-keyword">const</span> _effect = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReactiveEffect</span>(fn)<br>  <span class="hljs-comment">// 去调用方法</span><br>  _effect.<span class="hljs-title function_">run</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们 update 之前的逻辑就可以跑通了，下面的难点在于 update</p><h3 id="3-2-v2-版本"><a href="#3-2-v2-版本" class="headerlink" title="3.2 v2 版本"></a>3.2 v2 版本</h3><p>这个版本，我们主要是用于解决 update 的问题，我们来看看测试，发现在 get 操作的时候需要将依赖收集，在 set 操作的时候再去触发这个依赖，下面我们就可以手动在 reactive 中添加相应的逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params">raw</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(raw, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver);<br>      <span class="hljs-comment">// 在 get 时收集依赖</span><br>      <span class="hljs-title function_">track</span>(target, key);<br>      <span class="hljs-keyword">return</span> res;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver);<br>      <span class="hljs-comment">// 在 set 时触发依赖</span><br>      <span class="hljs-title function_">trigger</span>(target, key);<br>      <span class="hljs-keyword">return</span> res;<br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面，我们就去编写一个 track 和 trigger</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// track 相关代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactiveEffect</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 保存一下当前的 activeEffect</span><br>    activeEffect = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_fn</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建全局变量 targetMap</span><br><span class="hljs-keyword">const</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">track</span>(<span class="hljs-params">target, key</span>) &#123;<br>  <span class="hljs-comment">// 我们在运行时，可能会创建多个 target，每个 target 还会可能有多个 key，每个 key 又关联着多个 effectFn</span><br>  <span class="hljs-comment">// 而且 target -&gt; key -&gt; effectFn，这三者是树形的关系</span><br>  <span class="hljs-comment">// 因此就可以创建一个 WeakMap 用于保存 target，取出来就是每个 key 对应这一个 depsMap，而每个 depsMap 又是一个 Set</span><br>  <span class="hljs-comment">// 数据结构（避免保存重复的 effect）</span><br>  <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">if</span> (!depsMap) &#123;<br>    depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>    targetMap.<span class="hljs-title function_">set</span>(target, depsMap);<br>  &#125;<br>  <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (!dep) &#123;<br>    dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>    depsMap.<span class="hljs-title function_">set</span>(key, dep);<br>  &#125;<br>  <span class="hljs-comment">// 将 effect 加入到 set 中</span><br>  dep.<span class="hljs-title function_">add</span>(activeEffect);<br>&#125;<br><br><span class="hljs-comment">// 需要一个全局变量来保存当前的 effect</span><br><span class="hljs-keyword">let</span> activeEffect;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面是 trigger</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">target, key</span>) &#123;<br>  <span class="hljs-comment">// trigger 的逻辑就更加简单了，我们只需要取出对应的 deps 这个 set，再遍历执行每个 effect 就可以了</span><br>  <span class="hljs-keyword">const</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">const</span> deps = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> effect <span class="hljs-keyword">of</span> deps) &#123;<br>    effect.<span class="hljs-title function_">run</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们再跑测试，就发现通过了，现在我们已经实现了 effect、reactive 的 happy path 了</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mini-vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Study</title>
    <link href="/2022/03/02/ES6-Study/ES6-Study/"/>
    <url>/2022/03/02/ES6-Study/ES6-Study/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6-的相关学习"><a href="#ES6-的相关学习" class="headerlink" title="ES6 的相关学习"></a>ES6 的相关学习</h1><h3 id="asycn-await-方法"><a href="#asycn-await-方法" class="headerlink" title="asycn/await 方法"></a>asycn/await 方法</h3><blockquote><p>使用同步的方法请求异步接口</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">requestLogin</span> = (<span class="hljs-params">params</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;params.username&#125;</span>欢迎你`</span>);<br>  &#125;);<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">requestUserInfo</span> = (<span class="hljs-params">params</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;params&#125;</span>欢迎你`</span>);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleLogin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">requestLogin</span>(&#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;username&quot;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;123456&quot;</span>,<br>  &#125;);<br>  <span class="hljs-keyword">const</span> info = <span class="hljs-keyword">await</span> <span class="hljs-title function_">requestUserInfo</span>(res);<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>async 默认返回一个 Promise</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Power Apps使用感想</title>
    <link href="/2021/12/13/Power-Apps/Power-Apps/"/>
    <url>/2021/12/13/Power-Apps/Power-Apps/</url>
    
    <content type="html"><![CDATA[<h1 id="Power-Apps-使用感想"><a href="#Power-Apps-使用感想" class="headerlink" title="Power Apps 使用感想"></a>Power Apps 使用感想</h1><p>2021 年 4 月因为工作变动，开始使用微软推出的一个低代码开发工具 Power Apps,这里分析一下它的优缺点以及我的使用心得。</p><h3 id="什么是-Power-Platform？"><a href="#什么是-Power-Platform？" class="headerlink" title="什么是 Power Platform？"></a>什么是 Power Platform？</h3><p>Power Platform 由 Power BI， PowerApps， Power Automate 与 Power Virtual Agents 组成。微软一直在不断地将其作为一个整体来推广。这几项服务为管理我们的数字世界提供了工具，在这个世界中，数据为王，是任何企业流程的基础。它们的应用如下：</p><ol><li>您可以使用 Power BI 显示和分析数据。</li><li>您可以使用 PowerApps 操作和修改数据。</li><li>您可以使用 Power Automate 自动执行数据。</li></ol><h3 id="如何使用-Microsoft-PowerApps-构建应用程序"><a href="#如何使用-Microsoft-PowerApps-构建应用程序" class="headerlink" title="如何使用 Microsoft PowerApps 构建应用程序"></a>如何使用 Microsoft PowerApps 构建应用程序</h3><p>您可以在 PowerApps 中使用四种工具或环境，它们各自具有自己的功能和角色。</p><p>PowerApps 网站</p><p>该网站是您开始 PowerApps 服务之旅的地方。在这里，您可以创建新应用并管理现有应用。<br><img src="./Power_Apps.jpg" alt="Power_Apps"></p><h3 id="选择-PowerApps-应用程序类型"><a href="#选择-PowerApps-应用程序类型" class="headerlink" title="选择 PowerApps 应用程序类型"></a>选择 PowerApps 应用程序类型</h3><p>PowerApps 创建两种主要类型的应用程序：</p><ol><li>画布应用(Canvas)</li><li>模型驱动应用(Model-driven)</li></ol><p>画布应用（Canvas）应用程序使您可以通过将控件和字段定位在“完美像素”pixel-perfect”的用户体验中来自由，轻松地组织界面。这里的主要重点是将您的业务知识和创造力带入应用程序的设计中。 Canvas 应用程序的目标是轻量级应用程序，这意味着我们甚至可以在几分钟内进行设计和使用。</p><p>模型驱动的应用程序建立在通用数据服务（新名字为：Microsoft Dataflex Pro）的基础上，该通用数据服务用于帮助快速构建表单，流程和业务规则。他们适合用于【长时间使用】（一次多个小时）的非轻便应用程序。</p><p>使用 Model-driven App 时，会为您确定大量的布局，并且大部分由您添加到应用程序中的 Component 指定。相比之下，设计人员可以完全控制 canvas 应用程序开发中的应用程序布局。</p><p>Power Apps 数据源这部分有很多的坑，我们放到之后来详细解释。</p><p>相关链接：</p><ol><li><a href="https://powerbi.microsoft.com/">Power BI</a></li><li><a href="https://powerapps.microsoft.com/en-us/">Power Apps</a></li><li><a href="https://powerautomate.microsoft.com/zh-cn/">Power Automate</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>powerApps</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
